#!/usr/bin/env ruby

require 'thor'
require_relative '../lib/sfb_scripts/upper'

class CLI < Thor

  def initialize(args, options, config)
    # reset --hard hack!
    #
    # if the -g option is passed,
    # we concatenate the rest of the
    # command into a single string.
    #
    # This prevents Thor from interpreting
    # app_up -g reset --hard
    # as having the flags -g and --hard
    #
    # (we want to ignore the --hard
    # and just pass it on to git)

    action_flag_index = options.find_index('-g') || options.find_index('--git-action') || options.find_index('--action')

    if action_flag_index
      new_options = options[0..action_flag_index]
      new_options << options[action_flag_index+1 .. -1].join(' ')
      options = new_options
    end

    super(args, options, config)
  end

  #
  # REBASE
  #

  desc :up, "Rebase your commits onto master. Bundle installs and migrates as needed.  Will terminate if conflicts are found.  After conflicts are resolved, run again with --no-rebase."
  option :loud, :type => :boolean, :desc => 'Pipe output to terminal or not (output is always piped to /tmp/app_up.log)'
  option :no_git, aliases: ['--no-pull', '--no-rebase'], :type => :boolean, :desc => "Don't update the repo, just bundle and migrate everywhere."
  option :ignore, type: :array, desc: "Directories matching this pattern will be ignored.  Example: 'app_up --ignore engines' will not bundle or migrate in a directory matching the word engines.  You can specify multiple patterns: 'app_up --ignore dir1 dir2"
  option :on_branch, desc: "Rebase the current branch onto it's upstream counterpart. [Example: While on branch (feature_branch), using the --on-branch flag will yield the git command: 'git pull --rebase origin feature_branch'", default: 'master', default: false
  option :git_action, aliases: ['--action', '-g'], type: :array, desc: "Specify what command to pass to git [Example: app_up --git-action 'pull --rebase origin branch_name'].  Defaults to 'pull --rebase origin master'."
  option :finish_rebase, aliases ['--finish-merge'], type: :boolean, desc: "Recovers from rebase or merge conflicts"

  def up
    if options[:no_git]
      Upper.no_git(options)
    elsif options[:finish_rebase]
      Upper.finish_rebase(options)
    elsif options[:on_branch]
      Upper.rebase_on_branch!(options)
    elsif options[:git_action]
      Upper.arbitrary_action!(options[:git_action].join(' '), options)
    else
      Upper.rebase_on_master!(options)
    end
  end

  desc "install_hooks", "Install a pre-push git hook that will not let you push to remote master."
  def install_hooks
    Upper.install_hooks(options)
  end

  desc "pre_push_hook", "Deny destructive actions to the remote master."
  def pre_push_hook(git_command)
    Upper.pre_push_hook(git_command, options)
  end

  default_task :up
end

CLI.start(ARGV)
